//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.7.6, generator: @autorest/go@4.0.0-preview.42)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package generated

import "time"

// AdhocBasedTaggingCriteria - Class for Adhoc backup Tagging Criteria
type AdhocBasedTaggingCriteria struct {
	// Retention tag information
	TagInfo *RetentionTag `json:"tagInfo,omitempty"`
}

// AdhocBasedTriggerContext - Adhoc based trigger
type AdhocBasedTriggerContext struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// REQUIRED; Tagging Criteria containing retention tag for adhoc backup.
	TaggingCriteria *AdhocBasedTaggingCriteria `json:"taggingCriteria,omitempty"`
}

// GetTriggerContext implements the TriggerContextClassification interface for type AdhocBasedTriggerContext.
func (a *AdhocBasedTriggerContext) GetTriggerContext() *TriggerContext {
	return &TriggerContext{
		ObjectType: a.ObjectType,
	}
}

// AutoHealSettings - AutoHeal Settings ? On/Off ; other flags
type AutoHealSettings struct {
	// Policy controlled toggle
	AutoHealStatus *AutoHealStatus `json:"autoHealStatus,omitempty"`
}

// AzureBackupParamsClassification provides polymorphic access to related types.
// Call the interface's GetAzureBackupParams() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupParams, *AzureBackupParamsForPlugin
type AzureBackupParamsClassification interface {
	BackupParametersClassification
	// GetAzureBackupParams returns the AzureBackupParams content of the underlying type.
	GetAzureBackupParams() *AzureBackupParams
}

// AzureBackupParams - backup Parameters for Azure resources
type AzureBackupParams struct {
	// REQUIRED; BackupType ; Full/Incremental etc
	BackupType *string `json:"backupType,omitempty"`

	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetAzureBackupParams implements the AzureBackupParamsClassification interface for type AzureBackupParams.
func (a *AzureBackupParams) GetAzureBackupParams() *AzureBackupParams { return a }

// GetBackupParameters implements the BackupParametersClassification interface for type AzureBackupParams.
func (a *AzureBackupParams) GetBackupParameters() *BackupParameters {
	return &BackupParameters{
		ObjectType: a.ObjectType,
	}
}

// AzureBackupParamsForPlugin - Backup Parameters that need to be sent for plugin
type AzureBackupParamsForPlugin struct {
	// REQUIRED; BackupType ; Full/Incremental etc
	BackupType *string `json:"backupType,omitempty"`

	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// REQUIRED; Retention tag that the backup must be marked with
	RetentionTag *RetentionTag `json:"retentionTag,omitempty"`

	// Setting for autoHeal
	AutoHealSettings *AutoHealSettings `json:"autoHealSettings,omitempty"`

	// Policy Info that is required while creating the pit by plugin
	PolicyInfo *PolicyInfo `json:"policyInfo,omitempty"`

	// BackupInstance policy-parameters containing DataStore parameters etc.
	PolicyParameters *PolicyParameters `json:"policyParameters,omitempty"`

	// Trigger Type ? Adhoc/Scheduled/Custom event etc.
	TriggerType *TriggerType `json:"triggerType,omitempty"`
}

// GetAzureBackupParams implements the AzureBackupParamsClassification interface for type AzureBackupParamsForPlugin.
func (a *AzureBackupParamsForPlugin) GetAzureBackupParams() *AzureBackupParams {
	return &AzureBackupParams{
		BackupType: a.BackupType,
		ObjectType: a.ObjectType,
	}
}

// GetBackupParameters implements the BackupParametersClassification interface for type AzureBackupParamsForPlugin.
func (a *AzureBackupParamsForPlugin) GetBackupParameters() *BackupParameters {
	return &BackupParameters{
		ObjectType: a.ObjectType,
	}
}

// AzureOperationalStoreParameters - Parameters for Operational-Tier DataStore
type AzureOperationalStoreParameters struct {
	// REQUIRED; type of datastore; SnapShot/Hot/Archive
	DataStoreType *DataStoreTypes `json:"dataStoreType,omitempty"`

	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// Gets or sets the Resource Group Uri.
	ResourceGroupID *string `json:"resourceGroupId,omitempty"`
}

// GetDataStoreParameters implements the DataStoreParametersClassification interface for type AzureOperationalStoreParameters.
func (a *AzureOperationalStoreParameters) GetDataStoreParameters() *DataStoreParameters {
	return &DataStoreParameters{
		ObjectType:    a.ObjectType,
		DataStoreType: a.DataStoreType,
	}
}

// BackupClientCancelOptions contains the optional parameters for the BackupClient.Cancel method.
type BackupClientCancelOptions struct {
	// placeholder for future optional parameters
}

// BackupClientGetOptions contains the optional parameters for the BackupClient.Get method.
type BackupClientGetOptions struct {
	// placeholder for future optional parameters
}

// BackupClientRefreshTokensOptions contains the optional parameters for the BackupClient.RefreshTokens method.
type BackupClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// BackupCriteriaClassification provides polymorphic access to related types.
// Call the interface's GetBackupCriteria() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BackupCriteria, *ScheduleBasedBackupCriteria
type BackupCriteriaClassification interface {
	// GetBackupCriteria returns the BackupCriteria content of the underlying type.
	GetBackupCriteria() *BackupCriteria
}

// BackupCriteria - Identifies the type of backup and trigger
type BackupCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBackupCriteria implements the BackupCriteriaClassification interface for type BackupCriteria.
func (b *BackupCriteria) GetBackupCriteria() *BackupCriteria { return b }

// BackupDatasourceParametersClassification provides polymorphic access to related types.
// Call the interface's GetBackupDatasourceParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BackupDatasourceParameters, *BlobBackupDatasourceParameters
type BackupDatasourceParametersClassification interface {
	// GetBackupDatasourceParameters returns the BackupDatasourceParameters content of the underlying type.
	GetBackupDatasourceParameters() *BackupDatasourceParameters
}

// BackupDatasourceParameters - Parameters for Backup
type BackupDatasourceParameters struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBackupDatasourceParameters implements the BackupDatasourceParametersClassification interface for type BackupDatasourceParameters.
func (b *BackupDatasourceParameters) GetBackupDatasourceParameters() *BackupDatasourceParameters {
	return b
}

// BackupParametersClassification provides polymorphic access to related types.
// Call the interface's GetBackupParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureBackupParams, *AzureBackupParamsForPlugin, *BackupParameters
type BackupParametersClassification interface {
	// GetBackupParameters returns the BackupParameters content of the underlying type.
	GetBackupParameters() *BackupParameters
}

// BackupParameters - Base class for parameters specific to Backup agent
type BackupParameters struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBackupParameters implements the BackupParametersClassification interface for type BackupParameters.
func (b *BackupParameters) GetBackupParameters() *BackupParameters { return b }

// BackupRequest for the backup operation
type BackupRequest struct {
	// REQUIRED; List of properties with values that the Backup should honour, for a given BackupRule. Like Tags, Exclusion rules
	// etc.
	BackupParameters *AzureBackupParamsForPlugin `json:"backupParameters,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// REQUIRED; The dictionary required to initialize the Datastore client library.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// REQUIRED; The dictionary required to initialize the RPCatalog client library.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`

	// LoopbackContext returned from previous plugin calls, to be sent again.
	LoopBackContext *string `json:"loopBackContext,omitempty"`
}

// BackupRequestBase is the base for all backup request.
type BackupRequestBase struct {
	// REQUIRED; List of properties with values that the Backup should honour, for a given BackupRule. Like Tags, Exclusion rules
	// etc.
	BackupParameters *AzureBackupParamsForPlugin `json:"backupParameters,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// REQUIRED; The dictionary required to initialize the Datastore client library.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// REQUIRED; The dictionary required to initialize the RPCatalog client library.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// BackupResponse for the backup operation.
type BackupResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; Backup Status for the operation
	Result *BackupStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// BackupRule - Rule definition based on which backup is triggered
type BackupRule struct {
	// AutoHeal Settings ? On/Off ; other flags
	AutoHealSettings *AutoHealSettings `json:"autoHealSettings,omitempty"`

	// it will have parameters that should be used by BA i.e backup type like Full, Incremental, Logs
	BackupParameters BackupParametersClassification `json:"backupParameters,omitempty"`

	// Unique name of the entity/object (sometimes this is friendly as well)
	Name *string `json:"name,omitempty"`

	// Type of the object/command/entity
	ObjectType *string `json:"objectType,omitempty"`

	// DataStore info object
	TargetDatastore *DataStoreInfo `json:"targetDatastore,omitempty"`

	// Defines trigger; schedule based or adhoc
	Trigger TriggerContextClassification `json:"trigger,omitempty"`
}

// BackupSchedule - Complete definition of schedule
type BackupSchedule struct {
	// REQUIRED; ISO 8601 repeating time interval format
	RepeatingTimeIntervals []*string `json:"repeatingTimeIntervals,omitempty"`

	// TimeZone input as string. For example: TimeZone = "Pacific Standard Time".
	TimeZone *string `json:"timeZone,omitempty"`
}

// BackupSettings - Settings and rules required to take scheduled/adhoc backups
type BackupSettings struct {
	// REQUIRED; Type of datasource for the backup management
	DataSourceType *string `json:"dataSourceType,omitempty"`

	// REQUIRED; List of Rules
	Rules []*BackupRule `json:"rules,omitempty"`

	// Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// Name of the policy used for this backup instance
	PolicyName *string `json:"policyName,omitempty"`

	// Policy parameters for the backup instance
	PolicyParameters *PolicyParameters `json:"policyParameters,omitempty"`

	// this is optional raw json opaque setting for the datasource where mgmt does not understand the backup policy/setting.
	RawJSONSetting *string `json:"rawJsonSetting,omitempty"`
}

// BackupStatus for the backup operation.
type BackupStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Json serialized Loopback Context
	LoopBackContext *string `json:"loopBackContext,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// BaseRequest - Base request for all plugin operations
type BaseRequest struct {
	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// BaseResourcePropertiesClassification provides polymorphic access to related types.
// Call the interface's GetBaseResourceProperties() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *BaseResourceProperties
type BaseResourcePropertiesClassification interface {
	// GetBaseResourceProperties returns the BaseResourceProperties content of the underlying type.
	GetBaseResourceProperties() *BaseResourceProperties
}

// BaseResourceProperties - Properties which are specific to datasource/datasourcesets/backupinstanceref/backupsettings
type BaseResourceProperties struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetBaseResourceProperties implements the BaseResourcePropertiesClassification interface for type BaseResourceProperties.
func (b *BaseResourceProperties) GetBaseResourceProperties() *BaseResourceProperties { return b }

// BaseStatus - Base Response.
type BaseStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// BlobBackupDatasourceParameters - Parameters for Backup
type BlobBackupDatasourceParameters struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// List of containers to be protected
	ContainersList []*string `json:"containersList,omitempty"`
}

// GetBackupDatasourceParameters implements the BackupDatasourceParametersClassification interface for type BlobBackupDatasourceParameters.
func (b *BlobBackupDatasourceParameters) GetBackupDatasourceParameters() *BackupDatasourceParameters {
	return &BackupDatasourceParameters{
		ObjectType: b.ObjectType,
	}
}

// CancelRequest - Cancel Request contract
type CancelRequest struct {
	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`
}

// CommitOrRollbackBackupClientCancelOptions contains the optional parameters for the CommitOrRollbackBackupClient.Cancel
// method.
type CommitOrRollbackBackupClientCancelOptions struct {
	// placeholder for future optional parameters
}

// CommitOrRollbackBackupClientGetOptions contains the optional parameters for the CommitOrRollbackBackupClient.Get method.
type CommitOrRollbackBackupClientGetOptions struct {
	// placeholder for future optional parameters
}

// CommitOrRollbackBackupClientRefreshTokensOptions contains the optional parameters for the CommitOrRollbackBackupClient.RefreshTokens
// method.
type CommitOrRollbackBackupClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// CommitOrRollbackBackupRequest for the CommitOrRollbackBackup operation.
type CommitOrRollbackBackupRequest struct {
	// REQUIRED; List of properties with values that the Backup should honour, for a given BackupRule. Like Tags, Exclusion rules
	// etc.
	BackupParameters *AzureBackupParamsForPlugin `json:"backupParameters,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// REQUIRED; The dictionary required to initialize the Datastore client library.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// REQUIRED; The dictionary required to initialize the RPCatalog client library.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`

	// LoopbackContext returned from previous plugin calls, to be sent again.
	LoopBackContext *string `json:"loopBackContext,omitempty"`
}

// CommitOrRollbackBackupResponse for the backup operation.
type CommitOrRollbackBackupResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; CommitOrRollbackBackupStatus for the operation
	Result *CommitOrRollbackBackupStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// CommitOrRollbackBackupStatus for the CommitOrRollbackBackup operation.
type CommitOrRollbackBackupStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Size of data transferred as part of backup
	DataTransferredInBytes *int64 `json:"dataTransferredInBytes,omitempty"`

	// Size of datasource in bytes
	DatasourceSizeInBytes *int64 `json:"datasourceSizeInBytes,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// CommitOrRollbackRestoreClientCancelOptions contains the optional parameters for the CommitOrRollbackRestoreClient.Cancel
// method.
type CommitOrRollbackRestoreClientCancelOptions struct {
	// placeholder for future optional parameters
}

// CommitOrRollbackRestoreClientGetOptions contains the optional parameters for the CommitOrRollbackRestoreClient.Get method.
type CommitOrRollbackRestoreClientGetOptions struct {
	// placeholder for future optional parameters
}

// CommitOrRollbackRestoreClientRefreshTokensOptions contains the optional parameters for the CommitOrRollbackRestoreClient.RefreshTokens
// method.
type CommitOrRollbackRestoreClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// CommitOrRollbackRestoreRequest for the CommitOrRollbackRestore operation.
type CommitOrRollbackRestoreRequest struct {
	// REQUIRED; Overwrite if exists ?.
	ForceOverwrite *bool `json:"forceOverwrite,omitempty"`

	// REQUIRED; Restore type: OLR, ALR, ILR, Copy
	RestoreType *RestoreType `json:"restoreType,omitempty"`

	// REQUIRED; Source Datasource object
	SourceDatasource *Datasource `json:"sourceDatasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// Item level restore criteria
	ILRRestoreCriteria []ItemLevelRestoreCriteriaClassification `json:"iLRRestoreCriteria,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`

	// LoopbackContext returned from previous plugin calls, to be sent again.
	LoopBackContext *string `json:"loopBackContext,omitempty"`

	// The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Destination of RestoreAsFiles operation, when destination is not a datasource
	RestoreAsFilesTargetDetails *TargetDetails `json:"restoreAsFilesTargetDetails,omitempty"`

	// PointInTime to be used for restore.
	RestoreToPointInTime *string `json:"restoreToPointInTime,omitempty"`

	// RPId to be used for restore.
	RestoreToRPID *string `json:"restoreToRPId,omitempty"`

	// Source DatasourceSet object
	SourceDatasourceSet *DatasourceSet `json:"sourceDatasourceSet,omitempty"`

	// Target Datasource object
	TargetDatasource *Datasource `json:"targetDatasource,omitempty"`

	// Target DatasourceSet object
	TargetDatasourceSet *DatasourceSet `json:"targetDatasourceSet,omitempty"`
}

// CommitOrRollbackRestoreResponse for the Restore operation.
type CommitOrRollbackRestoreResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; CommitOrRollbackRestoreStatus for the operation
	Result *CommitOrRollbackRestoreStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// CommitOrRollbackRestoreStatus for the CommitOrRollbackRestore status.
type CommitOrRollbackRestoreStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Size of data transferred as part of backup
	DataTransferredInBytes *int64 `json:"dataTransferredInBytes,omitempty"`

	// Size of original datasource when the backup was created
	OriginalDatasourceSizeInBytes *int64 `json:"originalDatasourceSizeInBytes,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// DataStoreInfo - Information of Datastore
type DataStoreInfo struct {
	// REQUIRED; UniqueId of DataStore
	DataStoreID *string `json:"dataStoreId,omitempty"`

	// REQUIRED; Name of DataStore
	DataStoreName *string `json:"dataStoreName,omitempty"`

	// REQUIRED; type of datastore; SnapShot/Hot/Archive
	DataStoreType *DataStoreTypes `json:"dataStoreType,omitempty"`

	// REQUIRED; endpoint url of datastore
	DataStoreURL *string `json:"dataStoreURL,omitempty"`

	// REQUIRED; Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// Type of storage to be used for storing backup data. Passed as input to datastore.
	AuthorizationTypeFlags *string `json:"authorizationTypeFlags,omitempty"`

	// Type of storage to be used for storing backup data. Passed as input to datastore.
	StorageTypeFlags *string `json:"storageTypeFlags,omitempty"`
}

// DataStoreParametersClassification provides polymorphic access to related types.
// Call the interface's GetDataStoreParameters() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AzureOperationalStoreParameters, *DataStoreParameters
type DataStoreParametersClassification interface {
	// GetDataStoreParameters returns the DataStoreParameters content of the underlying type.
	GetDataStoreParameters() *DataStoreParameters
}

// DataStoreParameters - Parameters for DataStore
type DataStoreParameters struct {
	// REQUIRED; type of datastore; SnapShot/Hot/Archive
	DataStoreType *DataStoreTypes `json:"dataStoreType,omitempty"`

	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetDataStoreParameters implements the DataStoreParametersClassification interface for type DataStoreParameters.
func (d *DataStoreParameters) GetDataStoreParameters() *DataStoreParameters { return d }

// Datasource - Base datasource class with properties common to all fabric types
type Datasource struct {
	// REQUIRED; Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID
	// created by backup service via Fabric/Vault.
	ResourceID *string `json:"resourceID,omitempty"`

	// BaseUri of the resource. For azure resources, this will be ARM endpoint of current cloud. For non azure resources, this
	// will be private endpoint information or null.
	BaseURI *string `json:"baseUri,omitempty"`

	// DatasourceType of the resource.
	DatasourceType *string `json:"datasourceType,omitempty"`

	// Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// Location of datasource.
	ResourceLocation *string `json:"resourceLocation,omitempty"`

	// Unique identifier of the resource in the context of parent.
	ResourceName *string `json:"resourceName,omitempty"`

	// Properties specific to data source
	ResourceProperties BaseResourcePropertiesClassification `json:"resourceProperties,omitempty"`

	// Resource Type of Datasource.
	ResourceType *string `json:"resourceType,omitempty"`

	// Uri of the resource.
	ResourceURI *string `json:"resourceUri,omitempty"`
}

// DatasourceSet class with properties common to all fabric types
type DatasourceSet struct {
	// REQUIRED; Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID
	// created by backup service via Fabric/Vault.
	ResourceID *string `json:"resourceID,omitempty"`

	// BaseUri of the resource. For azure resources, this will be ARM endpoint of current cloud. For non azure resources, this
	// will be private endpoint information or null.
	BaseURI *string `json:"baseUri,omitempty"`

	// DatasourceType of the resource.
	DatasourceType *string `json:"datasourceType,omitempty"`

	// Type of Datasource object, used to initialize the right inherited type
	ObjectType *string `json:"objectType,omitempty"`

	// Location of datasource.
	ResourceLocation *string `json:"resourceLocation,omitempty"`

	// Unique identifier of the resource in the context of parent.
	ResourceName *string `json:"resourceName,omitempty"`

	// Properties specific to data source
	ResourceProperties BaseResourcePropertiesClassification `json:"resourceProperties,omitempty"`

	// Resource Type of Datasource.
	ResourceType *string `json:"resourceType,omitempty"`

	// Uri of the resource.
	ResourceURI *string `json:"resourceUri,omitempty"`
}

// DatasourceTokens - Tokens to be sent by Backup Agent to plugin host
type DatasourceTokens struct {
	// PrincipalId of the identity which is providing DataPlaneToken.
	DataPlanePrincipalID *string `json:"dataPlanePrincipalId,omitempty"`

	// Token associated with accessing the data plane of datasource.
	DataPlaneToken *string `json:"dataPlaneToken,omitempty"`

	// Gets or sets the type of DataPlaneToken. One of values defined in enum DataPlaneTokenType.
	DataPlaneTokenType *string `json:"dataPlaneTokenType,omitempty"`

	// PrincipalId of the identity which is providing DataPlaneToken. Typically Vault MSI PrincipalId.
	MgmtPlanePrincipalID *string `json:"mgmtPlanePrincipalId,omitempty"`

	// Access token for the Datasource management plane. This is an MSI token (in almost all cases)
	MgmtPlaneToken *string `json:"mgmtPlaneToken,omitempty"`
}

// Day of the Month.
type Day struct {
	// Date of the month
	Date *int32 `json:"date,omitempty"`

	// Whether Date is last date of month
	IsLast *bool `json:"isLast,omitempty"`
}

// Error object used by layers that dont use any localized content.
type Error struct {
	// Unique code for this error
	Code *string `json:"code,omitempty"`

	// Additional related Errors
	Details []*Error `json:"details,omitempty"`

	// Inner Error
	InnerError *InnerError `json:"innerError,omitempty"`

	// Message ? Human readable, non-localized.
	Message *string `json:"message,omitempty"`

	// Any key value pairs that can be injected inside error object
	Properties map[string]*string `json:"properties,omitempty"`

	// Target of the error.
	Target *string `json:"target,omitempty"`
}

// InnerError - Inner Error
type InnerError struct {
	// Any Key value pairs that can be provided to the client for additional verbose information.
	AdditionalInfo map[string]*string `json:"additionalInfo,omitempty"`

	// Unique code for this error
	Code *string `json:"code,omitempty"`

	// Child Inner Error, to allow Nesting.
	EmbeddedInnerError *InnerError `json:"embeddedInnerError,omitempty"`
}

// ItemLevelRestoreCriteriaClassification provides polymorphic access to related types.
// Call the interface's GetItemLevelRestoreCriteria() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *ItemLevelRestoreCriteria, *ItemPathBasedRestoreCriteria, *KubernetesPVRestoreCriteria, *KubernetesStorageClassRestoreCriteria,
// - *RangeBasedItemLevelRestoreCriteria
type ItemLevelRestoreCriteriaClassification interface {
	// GetItemLevelRestoreCriteria returns the ItemLevelRestoreCriteria content of the underlying type.
	GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria
}

// ItemLevelRestoreCriteria - Class to contain criteria for item level restore
type ItemLevelRestoreCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetItemLevelRestoreCriteria implements the ItemLevelRestoreCriteriaClassification interface for type ItemLevelRestoreCriteria.
func (i *ItemLevelRestoreCriteria) GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria { return i }

// ItemPathBasedRestoreCriteria - Class to contain criteria for item path based restore
type ItemPathBasedRestoreCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// Flag to specify if the path is relative to Backup Item or full path
	IsPathRelativeToBackupItem *bool `json:"isPathRelativeToBackupItem,omitempty"`

	// Path of the item to be restored
	ItemPath *string `json:"itemPath,omitempty"`
}

// GetItemLevelRestoreCriteria implements the ItemLevelRestoreCriteriaClassification interface for type ItemPathBasedRestoreCriteria.
func (i *ItemPathBasedRestoreCriteria) GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria {
	return &ItemLevelRestoreCriteria{
		ObjectType: i.ObjectType,
	}
}

// KubernetesPVRestoreCriteria - Class used for Kubernetes PV Restore Criteria
type KubernetesPVRestoreCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// name of the kubernetes resource
	Name *string `json:"name,omitempty"`

	// storage class name
	StorageClassName *string `json:"storageClassName,omitempty"`
}

// GetItemLevelRestoreCriteria implements the ItemLevelRestoreCriteriaClassification interface for type KubernetesPVRestoreCriteria.
func (k *KubernetesPVRestoreCriteria) GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria {
	return &ItemLevelRestoreCriteria{
		ObjectType: k.ObjectType,
	}
}

// KubernetesStorageClassRestoreCriteria - Class used for Kubernetes Storage Class Restore Criteria
type KubernetesStorageClassRestoreCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// provisioner for the kubernetes resource
	Provisioner *string `json:"provisioner,omitempty"`

	// selected storage class name
	SelectedStorageClassName *string `json:"selectedStorageClassName,omitempty"`
}

// GetItemLevelRestoreCriteria implements the ItemLevelRestoreCriteriaClassification interface for type KubernetesStorageClassRestoreCriteria.
func (k *KubernetesStorageClassRestoreCriteria) GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria {
	return &ItemLevelRestoreCriteria{
		ObjectType: k.ObjectType,
	}
}

// PluginClientBackupOptions contains the optional parameters for the PluginClient.Backup method.
type PluginClientBackupOptions struct {
	// placeholder for future optional parameters
}

// PluginClientCommitOrRollbackBackupOptions contains the optional parameters for the PluginClient.CommitOrRollbackBackup
// method.
type PluginClientCommitOrRollbackBackupOptions struct {
	// placeholder for future optional parameters
}

// PluginClientCommitOrRollbackRestoreOptions contains the optional parameters for the PluginClient.CommitOrRollbackRestore
// method.
type PluginClientCommitOrRollbackRestoreOptions struct {
	// placeholder for future optional parameters
}

// PluginClientRestoreOptions contains the optional parameters for the PluginClient.Restore method.
type PluginClientRestoreOptions struct {
	// placeholder for future optional parameters
}

// PluginClientStartProtectionOptions contains the optional parameters for the PluginClient.StartProtection method.
type PluginClientStartProtectionOptions struct {
	// placeholder for future optional parameters
}

// PluginClientStopProtectionOptions contains the optional parameters for the PluginClient.StopProtection method.
type PluginClientStopProtectionOptions struct {
	// placeholder for future optional parameters
}

// PluginClientUpdateProtectionOptions contains the optional parameters for the PluginClient.UpdateProtection method.
type PluginClientUpdateProtectionOptions struct {
	// placeholder for future optional parameters
}

// PluginClientValidateForBackupOptions contains the optional parameters for the PluginClient.ValidateForBackup method.
type PluginClientValidateForBackupOptions struct {
	// placeholder for future optional parameters
}

// PluginClientValidateForProtectionOptions contains the optional parameters for the PluginClient.ValidateForProtection method.
type PluginClientValidateForProtectionOptions struct {
	// placeholder for future optional parameters
}

// PluginClientValidateForRestoreOptions contains the optional parameters for the PluginClient.ValidateForRestore method.
type PluginClientValidateForRestoreOptions struct {
	// placeholder for future optional parameters
}

// PolicyInfo - Policy Info for the backups
type PolicyInfo struct {
	// Name of the policy that pit should be tagged with
	PolicyName *string `json:"policyName,omitempty"`

	// Version of policy that pit should be tagged with
	PolicyVersion *string `json:"policyVersion,omitempty"`
}

// PolicyParameters - Parameters in Policy
type PolicyParameters struct {
	// Gets or sets the Backup Parameters
	BackupDatasourceParametersList []BackupDatasourceParametersClassification `json:"backupDatasourceParametersList,omitempty"`

	// Gets or sets the DataStore Parameters
	DataStoreParametersList []DataStoreParametersClassification `json:"dataStoreParametersList,omitempty"`
}

// ProtectionRequestBase - Base request for Validate, Start and Stop protection
type ProtectionRequestBase struct {
	// REQUIRED; Full backup settings used to protect the datasource
	BackupSettings *BackupSettings `json:"backupSettings,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// RangeBasedItemLevelRestoreCriteria - Item Level target info for restore operation
type RangeBasedItemLevelRestoreCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// maximum value for range prefix match
	MaxMatchingValue *string `json:"maxMatchingValue,omitempty"`

	// minimum value for range prefix match
	MinMatchingValue *string `json:"minMatchingValue,omitempty"`
}

// GetItemLevelRestoreCriteria implements the ItemLevelRestoreCriteriaClassification interface for type RangeBasedItemLevelRestoreCriteria.
func (r *RangeBasedItemLevelRestoreCriteria) GetItemLevelRestoreCriteria() *ItemLevelRestoreCriteria {
	return &ItemLevelRestoreCriteria{
		ObjectType: r.ObjectType,
	}
}

// RefreshTokensRequest - RefreshToken Request contract
type RefreshTokensRequest struct {
	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`
}

// Response body received from the Plugin Server.
type Response struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// RestoreClientCancelOptions contains the optional parameters for the RestoreClient.Cancel method.
type RestoreClientCancelOptions struct {
	// placeholder for future optional parameters
}

// RestoreClientGetOptions contains the optional parameters for the RestoreClient.Get method.
type RestoreClientGetOptions struct {
	// placeholder for future optional parameters
}

// RestoreClientRefreshTokensOptions contains the optional parameters for the RestoreClient.RefreshTokens method.
type RestoreClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// RestoreRequest for the Restore operation.
type RestoreRequest struct {
	// REQUIRED; Overwrite if exists ?.
	ForceOverwrite *bool `json:"forceOverwrite,omitempty"`

	// REQUIRED; Restore type: OLR, ALR, ILR, Copy
	RestoreType *RestoreType `json:"restoreType,omitempty"`

	// REQUIRED; Source Datasource object
	SourceDatasource *Datasource `json:"sourceDatasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// Item level restore criteria
	ILRRestoreCriteria []ItemLevelRestoreCriteriaClassification `json:"iLRRestoreCriteria,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`

	// LoopbackContext returned from previous plugin calls, to be sent again.
	LoopBackContext *string `json:"loopBackContext,omitempty"`

	// The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Destination of RestoreAsFiles operation, when destination is not a datasource
	RestoreAsFilesTargetDetails *TargetDetails `json:"restoreAsFilesTargetDetails,omitempty"`

	// PointInTime to be used for restore.
	RestoreToPointInTime *string `json:"restoreToPointInTime,omitempty"`

	// RPId to be used for restore.
	RestoreToRPID *string `json:"restoreToRPId,omitempty"`

	// Source DatasourceSet object
	SourceDatasourceSet *DatasourceSet `json:"sourceDatasourceSet,omitempty"`

	// Target Datasource object
	TargetDatasource *Datasource `json:"targetDatasource,omitempty"`

	// Target DatasourceSet object
	TargetDatasourceSet *DatasourceSet `json:"targetDatasourceSet,omitempty"`
}

// RestoreRequestBase is the base for RestoreRequest
type RestoreRequestBase struct {
	// REQUIRED; Overwrite if exists ?.
	ForceOverwrite *bool `json:"forceOverwrite,omitempty"`

	// REQUIRED; Restore type: OLR, ALR, ILR, Copy
	RestoreType *RestoreType `json:"restoreType,omitempty"`

	// REQUIRED; Source Datasource object
	SourceDatasource *Datasource `json:"sourceDatasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// Item level restore criteria
	ILRRestoreCriteria []ItemLevelRestoreCriteriaClassification `json:"iLRRestoreCriteria,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`

	// The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Destination of RestoreAsFiles operation, when destination is not a datasource
	RestoreAsFilesTargetDetails *TargetDetails `json:"restoreAsFilesTargetDetails,omitempty"`

	// PointInTime to be used for restore.
	RestoreToPointInTime *string `json:"restoreToPointInTime,omitempty"`

	// RPId to be used for restore.
	RestoreToRPID *string `json:"restoreToRPId,omitempty"`

	// Source DatasourceSet object
	SourceDatasourceSet *DatasourceSet `json:"sourceDatasourceSet,omitempty"`

	// Target Datasource object
	TargetDatasource *Datasource `json:"targetDatasource,omitempty"`

	// Target DatasourceSet object
	TargetDatasourceSet *DatasourceSet `json:"targetDatasourceSet,omitempty"`
}

// RestoreResponse for the Restore operation.
type RestoreResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; RestoreStatus for the operation
	Result *RestoreStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// RestoreStatus for the Restore Operation.
type RestoreStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Json serialized Loopback Context
	LoopBackContext *string `json:"loopBackContext,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// RetentionTag - Retention Tag information
type RetentionTag struct {
	// REQUIRED; Retention Tag Name to relate it to retention rule.
	TagName *string `json:"tagName,omitempty"`

	// READ-ONLY; Retention Tag version.
	ETag *string `json:"eTag,omitempty" azure:"ro"`

	// READ-ONLY; Retention Tag version.
	ID *string `json:"id,omitempty" azure:"ro"`
}

// ScheduleBasedBackupCriteria - This is for scheduled backups where criteria is schedule based /// Example of supported identifiers:
// 1. Every Sunday/Monday DaysOfWeeks : Sunday/Monday
// 2. First/Second Sunday/Tuesday of the Month
// WeekOfMonth : First/Second
// DaysOfWeek : Sunday/Tuesday
// 3. 1st/2nd day of month
// DaysOfMonth : 1/2
// 4. First Sunday of January
// WeekOfMonth : First/Second
// DaysOfWeek : Sunday/Tuesday
// MonthsOfYear : Jan
// 5. 1st/2nd January
// DaysOfMonth : 1/2
// MonthsOfYear : Jan
// 6. First SuccessFull of Week
// AbsoluteIdentifier : FirstOfWeek
type ScheduleBasedBackupCriteria struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// it contains absolute values like "AllBackup" / "FirstOfDay" / "FirstOfWeek" / "FirstOfMonth" and should be part of AbsoluteMarker
	// enum
	AbsoluteCriteria []*AbsoluteMarker `json:"absoluteCriteria,omitempty"`

	// This is day of the month from 1 to 28 other wise last of month
	DaysOfMonth []*Day `json:"daysOfMonth,omitempty"`

	// It should be Sunday/Monday/T…./Saturday
	DaysOfTheWeek []*DayOfWeek `json:"daysOfTheWeek,omitempty"`

	// It should be January/February/……/December
	MonthsOfYear []*Month `json:"monthsOfYear,omitempty"`

	// List of schedule times for backup
	ScheduleTimes []*time.Time `json:"scheduleTimes,omitempty"`

	// It should be First/Second/Third/Fourth/Last
	WeeksOfTheMonth []*WeekNumber `json:"weeksOfTheMonth,omitempty"`
}

// GetBackupCriteria implements the BackupCriteriaClassification interface for type ScheduleBasedBackupCriteria.
func (s *ScheduleBasedBackupCriteria) GetBackupCriteria() *BackupCriteria {
	return &BackupCriteria{
		ObjectType: s.ObjectType,
	}
}

// ScheduleBasedTriggerContext - Specific class for schedule based triggers
type ScheduleBasedTriggerContext struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`

	// REQUIRED; Schedule for this backup
	Schedule *BackupSchedule `json:"schedule,omitempty"`

	// REQUIRED; List of tags that can be applicable for given schedule.
	TaggingCriteria []*TaggingCriteria `json:"taggingCriteria,omitempty"`
}

// GetTriggerContext implements the TriggerContextClassification interface for type ScheduleBasedTriggerContext.
func (s *ScheduleBasedTriggerContext) GetTriggerContext() *TriggerContext {
	return &TriggerContext{
		ObjectType: s.ObjectType,
	}
}

// StartProtectionClientCancelOptions contains the optional parameters for the StartProtectionClient.Cancel method.
type StartProtectionClientCancelOptions struct {
	// placeholder for future optional parameters
}

// StartProtectionClientGetOptions contains the optional parameters for the StartProtectionClient.Get method.
type StartProtectionClientGetOptions struct {
	// placeholder for future optional parameters
}

// StartProtectionClientRefreshTokensOptions contains the optional parameters for the StartProtectionClient.RefreshTokens
// method.
type StartProtectionClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// StartProtectionRequest for the StartProtection operation.
type StartProtectionRequest struct {
	// REQUIRED; Full backup settings used to protect the datasource
	BackupSettings *BackupSettings `json:"backupSettings,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// StartProtectionResponse for the Protection operation.
type StartProtectionResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; StartProtectionStatus for the operation
	Result *StartProtectionStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// StartProtectionStatus for the StartProtection operation.
type StartProtectionStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// StopProtectionClientCancelOptions contains the optional parameters for the StopProtectionClient.Cancel method.
type StopProtectionClientCancelOptions struct {
	// placeholder for future optional parameters
}

// StopProtectionClientGetOptions contains the optional parameters for the StopProtectionClient.Get method.
type StopProtectionClientGetOptions struct {
	// placeholder for future optional parameters
}

// StopProtectionClientRefreshTokensOptions contains the optional parameters for the StopProtectionClient.RefreshTokens method.
type StopProtectionClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// StopProtectionRequest for the StopProtection operation.
type StopProtectionRequest struct {
	// REQUIRED; Full backup settings used to protect the datasource
	BackupSettings *BackupSettings `json:"backupSettings,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// StopProtectionResponse for the Protection operation.
type StopProtectionResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; StopProtectionStatus for the operation
	Result *StopProtectionStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// StopProtectionStatus for stop protection operation
type StopProtectionStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// TaggingCriteria - Base class for Tagging Criteria
type TaggingCriteria struct {
	// REQUIRED; Specifies if tag is default.
	IsDefault *bool `json:"isDefault,omitempty"`

	// REQUIRED; Retention tag information
	TagInfo *RetentionTag `json:"tagInfo,omitempty"`

	// REQUIRED; Retention Tag priority.
	TaggingPriority *int64 `json:"taggingPriority,omitempty"`

	// Criteria which decides whether the tag can be applied to a triggered backup.
	Criteria []BackupCriteriaClassification `json:"criteria,omitempty"`
}

// TargetDetails - Class encapsulating target details, used where the destination is not a datasource
type TargetDetails struct {
	// REQUIRED; Restore operation may create multiple files inside location pointed by Url Below will be the common prefix for
	// all of them
	FilePrefix *string `json:"filePrefix,omitempty"`

	// REQUIRED; Denotes the target location where the data will be restored, string value for the enum {Microsoft.Internal.AzureBackup.DataProtection.Common.Interface.RestoreTargetLocationType}
	RestoreTargetLocationType *RestoreTargetLocationType `json:"restoreTargetLocationType,omitempty"`

	// REQUIRED; Url denoting the restore destination. It can point to container / file share etc
	URL *string `json:"url,omitempty"`
}

// TriggerContextClassification provides polymorphic access to related types.
// Call the interface's GetTriggerContext() method to access the common type.
// Use a type switch to determine the concrete type.  The possible types are:
// - *AdhocBasedTriggerContext, *ScheduleBasedTriggerContext, *TriggerContext
type TriggerContextClassification interface {
	// GetTriggerContext returns the TriggerContext content of the underlying type.
	GetTriggerContext() *TriggerContext
}

// TriggerContext - Contains the context of a backup trigger - whether it is event based, ad-hoc, etc.
type TriggerContext struct {
	// REQUIRED; Type of the specific object - used for deserializing
	ObjectType *string `json:"objectType,omitempty"`
}

// GetTriggerContext implements the TriggerContextClassification interface for type TriggerContext.
func (t *TriggerContext) GetTriggerContext() *TriggerContext { return t }

// UpdateProtectionClientCancelOptions contains the optional parameters for the UpdateProtectionClient.Cancel method.
type UpdateProtectionClientCancelOptions struct {
	// placeholder for future optional parameters
}

// UpdateProtectionClientGetOptions contains the optional parameters for the UpdateProtectionClient.Get method.
type UpdateProtectionClientGetOptions struct {
	// placeholder for future optional parameters
}

// UpdateProtectionClientRefreshTokensOptions contains the optional parameters for the UpdateProtectionClient.RefreshTokens
// method.
type UpdateProtectionClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// UpdateProtectionRequest for the UpdateProtection operation.
type UpdateProtectionRequest struct {
	// REQUIRED; Full backup settings used to protect the datasource
	BackupSettings *BackupSettings `json:"backupSettings,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// UpdateProtectionResponse for the Protection operation.
type UpdateProtectionResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; UpdateProtectionStatus for the operation
	Result *UpdateProtectionStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// UpdateProtectionStatus for the Update Protection operation.
type UpdateProtectionStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// ValidateForBackupClientCancelOptions contains the optional parameters for the ValidateForBackupClient.Cancel method.
type ValidateForBackupClientCancelOptions struct {
	// placeholder for future optional parameters
}

// ValidateForBackupClientGetOptions contains the optional parameters for the ValidateForBackupClient.Get method.
type ValidateForBackupClientGetOptions struct {
	// placeholder for future optional parameters
}

// ValidateForBackupClientRefreshTokensOptions contains the optional parameters for the ValidateForBackupClient.RefreshTokens
// method.
type ValidateForBackupClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// ValidateForBackupRequest for the validate for backup operation.
type ValidateForBackupRequest struct {
	// REQUIRED; List of properties with values that the Backup should honour, for a given BackupRule. Like Tags, Exclusion rules
	// etc.
	BackupParameters *AzureBackupParamsForPlugin `json:"backupParameters,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// REQUIRED; The dictionary required to initialize the Datastore client library.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// REQUIRED; The dictionary required to initialize the RPCatalog client library.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// ValidateForBackupResponse for the Protection operation.
type ValidateForBackupResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; ValidateForBackupStatus for the operation
	Result *ValidateForBackupStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// ValidateForBackupStatus for the validate for backup operation.
type ValidateForBackupStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Json serialized Loopback Context
	LoopBackContext *string `json:"loopBackContext,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// ValidateForProtectionClientCancelOptions contains the optional parameters for the ValidateForProtectionClient.Cancel method.
type ValidateForProtectionClientCancelOptions struct {
	// placeholder for future optional parameters
}

// ValidateForProtectionClientGetOptions contains the optional parameters for the ValidateForProtectionClient.Get method.
type ValidateForProtectionClientGetOptions struct {
	// placeholder for future optional parameters
}

// ValidateForProtectionClientRefreshTokensOptions contains the optional parameters for the ValidateForProtectionClient.RefreshTokens
// method.
type ValidateForProtectionClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// ValidateForProtectionRequest for the validate for protection operation.
type ValidateForProtectionRequest struct {
	// REQUIRED; Full backup settings used to protect the datasource
	BackupSettings *BackupSettings `json:"backupSettings,omitempty"`

	// REQUIRED; Datasource object
	Datasource *Datasource `json:"datasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// DatasourceSet object
	DatasourceSet *DatasourceSet `json:"datasourceSet,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`
}

// ValidateForProtectionResponse for the Protection operation.
type ValidateForProtectionResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; ValidateForProtectionStatus for the operation
	Result *ValidateForProtectionStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// ValidateForProtectionStatus for the ValidateForProtection operation.
type ValidateForProtectionStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}

// ValidateForRestoreClientCancelOptions contains the optional parameters for the ValidateForRestoreClient.Cancel method.
type ValidateForRestoreClientCancelOptions struct {
	// placeholder for future optional parameters
}

// ValidateForRestoreClientGetOptions contains the optional parameters for the ValidateForRestoreClient.Get method.
type ValidateForRestoreClientGetOptions struct {
	// placeholder for future optional parameters
}

// ValidateForRestoreClientRefreshTokensOptions contains the optional parameters for the ValidateForRestoreClient.RefreshTokens
// method.
type ValidateForRestoreClientRefreshTokensOptions struct {
	// placeholder for future optional parameters
}

// ValidateForRestoreRequest - Validates the restore request on the plugin.
type ValidateForRestoreRequest struct {
	// REQUIRED; Overwrite if exists ?.
	ForceOverwrite *bool `json:"forceOverwrite,omitempty"`

	// REQUIRED; Restore type: OLR, ALR, ILR, Copy
	RestoreType *RestoreType `json:"restoreType,omitempty"`

	// REQUIRED; Source Datasource object
	SourceDatasource *Datasource `json:"sourceDatasource,omitempty"`

	// Additional Properties for extensibility.
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Access token for the Datasource Mgmt and Data plane. This is an MSI token (in almost all cases)
	DatasourceAccessToken *DatasourceTokens `json:"datasourceAccessToken,omitempty"`

	// The dictionary required to initialize the Datastore client library. We need to GET Backup content of the source.
	DatastoreInitializeParams map[string]*string `json:"datastoreInitializeParams,omitempty"`

	// Item level restore criteria
	ILRRestoreCriteria []ItemLevelRestoreCriteriaClassification `json:"iLRRestoreCriteria,omitempty"`

	// This is set to true, if the request is not part of actual Restore operation, Else this is set to false/Null
	IsValidateOnlyOperation *bool `json:"isValidateOnlyOperation,omitempty"`

	// The initialization params of the Job Client Lib. The plugin needs this to do progress updates on Jobs.
	JobLibraryInitializationParams *string `json:"jobLibraryInitializationParams,omitempty"`

	// The dictionary required to initialize the RPCatalog client library. We need to GET RPs of the src.
	RPCatalogInitializeParams map[string]*string `json:"rPCatalogInitializeParams,omitempty"`

	// Destination of RestoreAsFiles operation, when destination is not a datasource
	RestoreAsFilesTargetDetails *TargetDetails `json:"restoreAsFilesTargetDetails,omitempty"`

	// PointInTime to be used for restore.
	RestoreToPointInTime *string `json:"restoreToPointInTime,omitempty"`

	// RPId to be used for restore.
	RestoreToRPID *string `json:"restoreToRPId,omitempty"`

	// Source DatasourceSet object
	SourceDatasourceSet *DatasourceSet `json:"sourceDatasourceSet,omitempty"`

	// Target Datasource object
	TargetDatasource *Datasource `json:"targetDatasource,omitempty"`

	// Target DatasourceSet object
	TargetDatasourceSet *DatasourceSet `json:"targetDatasourceSet,omitempty"`
}

// ValidateForRestoreResponse for the Restore operation.
type ValidateForRestoreResponse struct {
	// REQUIRED; As passed in the URL?s operationId query parameter
	ID *string `json:"id,omitempty"`

	// REQUIRED; ValidateForRestoreStatus for the operation
	Result *ValidateForRestoreStatus `json:"result,omitempty"`

	// REQUIRED; Service-set extensible enum indicating operation?s kind
	Status *ExecutionStatus `json:"status,omitempty"`

	// Embedded Error Object.
	Error *Error `json:"error,omitempty"`
}

// ValidateForRestoreStatus - Plugin's Status for validate for restore request
type ValidateForRestoreStatus struct {
	// Any additional properties that should be returned along with this operation
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty"`

	// Json serialized Loopback Context
	LoopBackContext *string `json:"loopBackContext,omitempty"`

	// If Plugin terminates with a retryable ErrorCode, it can set this value in Seconds for BA to retry after this.
	RetryAfterOnRetryableErrorInSeconds *int32 `json:"retryAfterOnRetryableErrorInSeconds,omitempty"`

	// Additional Json Serialized Telemetry data from the Plugin. This would be logged with BA Telemetry.
	TelemetryData *string `json:"telemetryData,omitempty"`
}
